// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const getFollowers = `-- name: GetFollowers :many
SELECT usernameseguace FROM SEGUIRE WHERE usernameseguito = $1 AND DataFine IS NULL
`

func (q *Queries) GetFollowers(ctx context.Context, usernameseguito string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowers, usernameseguito)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var usernameseguace string
		if err := rows.Scan(&usernameseguace); err != nil {
			return nil, err
		}
		items = append(items, usernameseguace)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFollowing = `-- name: GetFollowing :many
SELECT usernameseguito FROM SEGUIRE WHERE usernameseguace = $1 AND DataFine IS NULL
`

func (q *Queries) GetFollowing(ctx context.Context, usernameseguace string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFollowing, usernameseguace)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var usernameseguito string
		if err := rows.Scan(&usernameseguito); err != nil {
			return nil, err
		}
		items = append(items, usernameseguito)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertPassword = `-- name: InsertPassword :exec
INSERT INTO STORICO_PASSWORD (Username, Password, DataInserimento)
    VALUES ($1, $2, $3)
`

type InsertPasswordParams struct {
	Username        string
	Password        string
	Datainserimento time.Time
}

func (q *Queries) InsertPassword(ctx context.Context, arg InsertPasswordParams) error {
	_, err := q.db.ExecContext(ctx, insertPassword, arg.Username, arg.Password, arg.Datainserimento)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO UTENTE (Username, DataDiNascita, Nome, Cognome, Domicilio) 
    VALUES             ($1,    $2,        $3,   $4,      $5)
`

type InsertUserParams struct {
	Username      string
	Datadinascita sql.NullTime
	Nome          sql.NullString
	Cognome       sql.NullString
	Domicilio     sql.NullString
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.Username,
		arg.Datadinascita,
		arg.Nome,
		arg.Cognome,
		arg.Domicilio,
	)
	return err
}

const testQuery = `-- name: TestQuery :one
SELECT nome, descrizione, idchat FROM CHAT
`

func (q *Queries) TestQuery(ctx context.Context) (Chat, error) {
	row := q.db.QueryRowContext(ctx, testQuery)
	var i Chat
	err := row.Scan(&i.Nome, &i.Descrizione, &i.Idchat)
	return i, err
}
